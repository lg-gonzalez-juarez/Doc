I"q<h2 id="understanding-immutability">Understanding Immutability</h2>

<p>As we start digging into sequence types like strings, lists, tuples, and dictionaries, we need to start thinking about the mutability of a type or whether or not it can change. Normally, we’ll talk about whether or not a type is “immutable,” meaning that it can’t be changed, and most of the types we’ve looked at thus far are immutable.</p>

<h3 id="documentation-for-this-video">Documentation For This Video</h3>

<p><a href="https://docs.python.org/3/library/stdtypes.html#immutable-sequence-types">Immutable Sequences</a></p>

<h3 id="why-does-immutability-matter">Why Does Immutability Matter?</h3>

<p>Immutability is something that we don’t always have to think about, but it does matter in a few very common cases:</p>

<h3 id="understanding-why-we-cant-modify-a-string-in-place">Understanding why we can’t modify a string in-place</h3>

<p>Using objects as keys for dictionaries (we’ll get to this later)
We’ll cover dictionaries in a different section, but when it comes to strings, wanting to modify a string variable is fairly common. Strings are an immutable type in Python, so we can’t change a string object. We can only create new strings with the modifications that we wanted. This means that the only way for us to change the string value of a variable is to explicitly reassign it. As we learn about mutable types, we’ll see that other types allow us to modify the value of a variable without explicitly reassigning it.</p>

<h3 id="immutability-of-strings">Immutability of Strings</h3>

<p>When looking at str class there are many methods that return a str to us, such as capitalize:</p>

<pre><code class="language-cmd">&gt;&gt;&gt; my_str = 'testing'
&gt;&gt;&gt; my_str.capitalize()
'Testing'
&gt;&gt;&gt; my_str
'testing'
</code></pre>
<p>We won’t find a method that changes the value of my_str in this example. Beyond this, each unique string that we can only type will only exist once in memory. In our case, we referenced the literal ‘testing’ when we assigned the value to our variable, and if we ever use the literal of ‘testing’ again it will point to the same point in memory, because that value can’t be modified.</p>

<pre><code class="language-cmd">&gt;&gt;&gt; id(my_str)
4522355248
&gt;&gt;&gt; id('testing')
4522355248
</code></pre>
<p>This feature prevents the same value being allocated more than once and taking up more spots in our computer’s memory than we need it to.</p>

<h2 id="the-len-function">The <code class="language-plaintext highlighter-rouge">len</code> Function</h2>

<p>In this short lesson, we’re going to take a look at a built-in function that will help us see how long any sequence or collection type is, including strings: the len function.</p>

<h3 id="documentation-for-this-video-1">Documentation For This Video</h3>

<p><a href="https://docs.python.org/3/library/functions.html#len">The len function</a></p>

<h3 id="the-len-function-1">The len Function</h3>
<p>Needing to know the length of a string is very common. Thankfully, the len function will return how many characters are in a string:</p>

<pre><code class="language-cmd">&gt;&gt;&gt; len('testing')
7
&gt;&gt;&gt; len('')
0
</code></pre>

<p>This may seem a little boring, but it will help us to keep from causing too many errors when we start learning about indexing and slicing in the next lesson.</p>

:ET