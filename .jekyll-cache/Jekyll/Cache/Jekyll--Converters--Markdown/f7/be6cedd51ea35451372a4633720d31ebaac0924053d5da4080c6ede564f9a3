I"ˇ=<h1 id="using-python-dictionaries">Using Python Dictionaries</h1>

<h2 id="introduction">Introduction</h2>

<p>Dictionaries are one of the fundamental data types that we use in Python to solve real problems. These are handy when we don‚Äôt need a sequential list of items, and it is more useful to have unique identifiers for looking up values. Being able to manipulate dictionaries and access items is necessary for effective programming. In this hands-on lab, we‚Äôll be working through some exercises demonstrating that we understand how to add, remove, modify, and read items from dictionaries in Python. We‚Äôll be asked to perform actions on a dictionary to meet some checkpoint requirements provided to us within a Python file.</p>

<p>To feel comfortable completing this lab you‚Äôll want to know how to do the following:</p>

<p>Working with dictionary literals. Watch the ‚ÄúDictionaries‚Äù video from the Certified Entry-Level Python Programmer Certification course.
Using Dictionary functions and methods. Watch the ‚ÄúDictionary Methods‚Äù video from the Certified Entry-Level Python Programmer Certification course.</p>

<h2 id="the-scenario">The Scenario</h2>

<p>From within the <code class="language-plaintext highlighter-rouge">using-dictionaries.py</code> file, we‚Äôll be modifying the <code class="language-plaintext highlighter-rouge">users</code> list so that the assertions throughout the file all succeed eventually. As we‚Äôre working through the tasks we can run the file. Whenever Python gets to a line that starts with <code class="language-plaintext highlighter-rouge">assert</code>, it will raise an error and stop executing if we haven‚Äôt met the criteria. The first error will look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3.7 using-dictionaries.py
Traceback (most recent call last):
  File "s9-lists/using-dictionaries-starter.py", line 3, in &lt;module&gt;
    assert users == [], f"Expected `users` to be [] but got: {repr(users)}"
NameError: name 'users' is not defined
</code></pre></div></div>

<p>This process will show us the line where the issue was encountered, and show us the differences between our expected and actual values.</p>

<h2 id="logging-in">Logging In</h2>

<p>There are a couple of ways to get in and work with the code. One is to use the credentials provided in the hands-on lab overview page, log in with SSH, and use a text editor in the terminal.</p>

<p>The other is using VS Code in the browser. If you‚Äôd like to go this route, then you will need to navigate to the public IP address of the workstation server (provided in the hands-on lab overview page) on port 8080 (example: http://PUBLIC_IP:8080).</p>

<p>Once we are in the server, open up using-dictionaries.py (with either VS Code or a command line text editor) and we can continue.</p>

<h2 id="create-the-emails-dictionary-and-add-initial-items">Create the emails Dictionary and Add Initial Items</h2>

<p>Our first few tasks require us to create the emails variable that we‚Äôre going to work with throughout the lab and then add some information to it. Here‚Äôs how we complete the first task:</p>

<p><strong>using-dictionaries.py</strong> (partial)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1) Set the emails variable to be an empty dictionary
</span><span class="n">emails</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">assert</span> <span class="n">emails</span> <span class="o">==</span> <span class="p">{},</span> <span class="sa">f</span><span class="s">"Expected `emails` to be  but got: </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">users</span><span class="p">)</span><span class="si">}</span><span class="s">"</span>
</code></pre></div></div>

<p>Now if we run the file (python3.7 using-dictionaries.py), we should see the error for the second task:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">python3</span><span class="p">.</span><span class="mi">7</span> <span class="n">using</span><span class="o">-</span><span class="n">dictionaries</span><span class="p">.</span><span class="n">py</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">"using-dictionaries-final.py"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">12</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
    <span class="p">},</span> <span class="sa">f</span><span class="s">"Expected `emails` to be ashley but got: </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">emails</span><span class="p">)</span><span class="si">}</span><span class="s">"</span>
<span class="nb">AssertionError</span><span class="p">:</span> <span class="n">Expected</span> <span class="sb">`emails`</span> <span class="n">to</span> <span class="n">be</span> <span class="p">{</span><span class="s">'ashley'</span><span class="p">:</span> <span class="s">'ashley@example.com'</span><span class="p">,</span> <span class="s">'craig'</span><span class="p">:</span> <span class="s">'craig@example.com'</span><span class="p">,</span> <span class="s">'elizabeth'</span><span class="p">:</span> <span class="s">'elizabeth@example.com'</span><span class="p">}</span> <span class="n">but</span> <span class="n">got</span><span class="p">:</span> <span class="p">{}</span>
</code></pre></div></div>

<p>This shows us that we need to add values to the dictionary before we can continue. The task also specifies that we shouldn‚Äôt just reassign the emails variable. Here‚Äôs an example solution to this:</p>

<p><strong>using-dictionaries.py</strong> (partial)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 2) Add 'ashley', 'craig', and 'elizabeth' to the emails dictionary without reassigning the variable.
</span>
<span class="n">emails</span><span class="p">[</span><span class="s">'ashley'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'ashley@example.com'</span>
<span class="n">emails</span><span class="p">[</span><span class="s">'craig'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'craig@example.com'</span>
<span class="n">emails</span><span class="p">[</span><span class="s">'elizabeth'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'elizabeth@example.com'</span>

<span class="k">assert</span> <span class="n">emails</span> <span class="o">==</span> <span class="p">{</span>
    <span class="s">'ashley'</span><span class="p">:</span> <span class="s">'ashley@example.com'</span><span class="p">,</span>
    <span class="s">'craig'</span><span class="p">:</span> <span class="s">'craig@example.com'</span><span class="p">,</span>
    <span class="s">'elizabeth'</span><span class="p">:</span> <span class="s">'elizabeth@example.com'</span>
<span class="p">},</span> <span class="sa">f</span><span class="s">"Expected `emails` to be ashley but got: </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">emails</span><span class="p">)</span><span class="si">}</span><span class="s">"</span>
</code></pre></div></div>

<p>Now when we run <code class="language-plaintext highlighter-rouge">python3.7 using-dictionaries.py</code> again, we‚Äôll get a little farther down the script before we get an error.</p>

<h2 id="remove-craig-and-add-dalton">Remove craig and Add dalton</h2>

<p>For tasks 3 and 4, we need to remove the <code class="language-plaintext highlighter-rouge">craig</code> key/value pair and add one called <code class="language-plaintext highlighter-rouge">dalton</code>. Here‚Äôs an example solution for getting rid of <code class="language-plaintext highlighter-rouge">craig</code>:</p>

<p><strong>using-dictionaries.py</strong> (partial)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 3) Remove 'craig' from the emails dictionary without reassigning the variable.
</span><span class="k">del</span> <span class="n">emails</span><span class="p">[</span><span class="s">"craig"</span><span class="p">]</span>

<span class="k">assert</span> <span class="n">emails</span> <span class="o">==</span> <span class="p">{</span>
    <span class="s">"ashley"</span><span class="p">:</span> <span class="s">"ashley@example.com"</span><span class="p">,</span>
    <span class="s">"elizabeth"</span><span class="p">:</span> <span class="s">"elizabeth@example.com"</span><span class="p">,</span>
<span class="p">},</span> <span class="sa">f</span><span class="s">"Expected `emails` to be ashley but got: </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">emails</span><span class="p">)</span><span class="si">}</span><span class="s">"</span>
</code></pre></div></div>

<p>When we run the script again, we‚Äôll get an error about it expecting a <code class="language-plaintext highlighter-rouge">dalton</code>. To fix that, we need to add it in. Here‚Äôs how:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 4) Add 'dalton' to the emails dictionary without reassigning the variable.
</span>
<span class="n">emails</span><span class="p">[</span><span class="s">"dalton"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"dalton@example.com"</span>

<span class="k">assert</span> <span class="n">emails</span> <span class="o">==</span> <span class="p">{</span>
    <span class="s">"ashley"</span><span class="p">:</span> <span class="s">"ashley@example.com"</span><span class="p">,</span>
    <span class="s">"elizabeth"</span><span class="p">:</span> <span class="s">"elizabeth@example.com"</span><span class="p">,</span>
    <span class="s">"dalton"</span><span class="p">:</span> <span class="s">"dalton@example.com"</span><span class="p">,</span>
<span class="p">},</span> <span class="sa">f</span><span class="s">"Expected `emails` to be ashley but got: </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">emails</span><span class="p">)</span><span class="si">}</span><span class="s">"</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">del</code> statement will allow us to remove an item with the specified key to complete task three. For task four, we‚Äôve just added add another key/value pair.</p>

<h2 id="return-a-list-of-keys-and-a-list-of-values-from-the-emails-dictionary">Return a List of Keys and a List of Values from the emails Dictionary</h2>

<p>For tasks 5 and 6, we‚Äôll be extracting information from the <code class="language-plaintext highlighter-rouge">emails</code> dictionary to populate new lists for <code class="language-plaintext highlighter-rouge">users</code> and <code class="language-plaintext highlighter-rouge">email_list</code>. The <code class="language-plaintext highlighter-rouge">users</code> list will contain all of the keys from <code class="language-plaintext highlighter-rouge">emails</code> and the <code class="language-plaintext highlighter-rouge">email_list</code> will include all of the values.</p>

<p><strong>using-dictionaries.py</strong> (partial)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 5) Return a list of keys from the emails dictionary as `users`
</span><span class="n">users</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">emails</span><span class="p">.</span><span class="n">keys</span><span class="p">())</span>

<span class="k">assert</span> <span class="n">users</span> <span class="o">==</span> <span class="p">[</span>
    <span class="s">"ashley"</span><span class="p">,</span>
    <span class="s">"elizabeth"</span><span class="p">,</span>
    <span class="s">"dalton"</span><span class="p">,</span>
<span class="p">],</span> <span class="sa">f</span><span class="s">"Expected `users` to be ['ashley', 'elizabeth', 'dalton'] but got: </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">users</span><span class="p">)</span><span class="si">}</span><span class="s">"</span>

<span class="c1"># 6) Return a list of values from the emails dictionary as `email_list`
</span><span class="n">email_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">emails</span><span class="p">.</span><span class="n">values</span><span class="p">())</span>

<span class="k">assert</span> <span class="n">email_list</span> <span class="o">==</span> <span class="p">[</span>
    <span class="s">"ashley@example.com"</span><span class="p">,</span>
    <span class="s">"elizabeth@example.com"</span><span class="p">,</span>
    <span class="s">"dalton@example.com"</span><span class="p">,</span>
<span class="p">],</span> <span class="sa">f</span><span class="s">"Expected `email_list` to be ['ashely@example.com', 'elizabeth@example.com', 'dalton@example.com'] but got: </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">email_list</span><span class="p">)</span><span class="si">}</span><span class="s">"</span>
</code></pre></div></div>

<p>Running the script now will get us almost to the end.</p>

<h2 id="return-a-list-of-tuples-called-pairs-representing-the-keyvalue-pairs-in-emails">Return a List of Tuples Called pairs Representing the Key/Value Pairs in emails</h2>

<p>For the final task, we‚Äôll extract a new list called <code class="language-plaintext highlighter-rouge">pairs</code> from emails that will include a 2-tuple for each key/value pair in the <code class="language-plaintext highlighter-rouge">emails</code> dictionary.</p>

<p><strong>using-dictionaries.py</strong> (partial)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 7) Return a list of tuples called `pairs` representing the key/value pairs in `emails`.
</span><span class="n">pairs</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">emails</span><span class="p">.</span><span class="n">items</span><span class="p">())</span>

<span class="k">assert</span> <span class="n">pairs</span> <span class="o">==</span> <span class="p">[</span>
    <span class="p">(</span><span class="s">"ashley"</span><span class="p">,</span> <span class="s">"ashley@example.com"</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"elizabeth"</span><span class="p">,</span> <span class="s">"elizabeth@example.com"</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"dalton"</span><span class="p">,</span> <span class="s">"dalton@example.com"</span><span class="p">),</span>
<span class="p">],</span> <span class="sa">f</span><span class="s">"Expected `pairs` to be [('ashley', 'ashley@example.com'), ('elizabeth', 'elizabeth@example.com'), ('dalton', 'dalton@example.com')] but got: </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">pairs</span><span class="p">)</span><span class="si">}</span><span class="s">"</span>
</code></pre></div></div>
:ET