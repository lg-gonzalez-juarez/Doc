I"ë&<h2 id="typecasting">Typecasting</h2>

<p>Up to this point, we‚Äôve worked with a lot of different types, but before we can start taking user input and do interesting things with it we‚Äôll need to convert from one type to another. This process is called ‚Äútypecasting‚Äù.</p>

<h3 id="documentation-for-this-video">Documentation For This Video</h3>

<p><a href="https://docs.python.org/3/library/functions.html#int">Typecasting: int</a>
<a href="https://docs.python.org/3/library/functions.html#float">Typecasting: float</a>
<a href="https://docs.python.org/3/library/functions.html#str">Typecasting: str</a>
<a href="https://docs.python.org/3/library/functions.html#bool">Typecasting: bool</a>
<a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing">Trust Value Testing</a></p>

<h3 id="converting-from-a-number-type-to-a-number-type">Converting from a Number Type to a Number Type</h3>

<p>We‚Äôve already seen some typecasting happen behind the scenes when we performed some of the mathematical operations. For instance, performing ‚Äútrue division‚Äù (using the / operator) will always return a float even if we provide two integer operands. How do we go about converting from an integer to a float ourselves though?</p>

<p>The answer is by using the float initializer.</p>

<pre><code class="language-cmd">&gt;&gt;&gt; float(1)
1.0
</code></pre>

<p>We can do the same thing going from a float to an integer using the int initializer:</p>

<pre><code class="language-cmd">&gt;&gt;&gt; int(1.3)
1
&gt;&gt;&gt; int(2.6)
2
</code></pre>

<p>Notice that the result from converting 2.6 to an integer doesn‚Äôt round, it truncates. It‚Äôs as though the decimal point value doesn‚Äôt exist.</p>

<p>Converting between number types is pretty straight forward because they‚Äôre both numbers, but what happens if we try to convert to and from a string?</p>

<h3 id="converting-to-and-from-a-string">Converting to and from a String</h3>

<p>Converting to a string is done by using the str initializer and the results are what you would expect:</p>

<pre><code class="language-cmd">&gt;&gt;&gt; str(1)
'1'
&gt;&gt;&gt; str(2.6)
'2.6'
&gt;&gt;&gt; str(False)
'False'
</code></pre>

<p>As we see, even booleans can be typecast to strings. More interesting than converting to strings is trying to convert strings into other usable types, like integers and floats:</p>

<pre><code class="language-cmd">&gt;&gt;&gt; int('1')
1
&gt;&gt;&gt; float('1')
1.0
&gt;&gt;&gt; float('1.2')
1.2
&gt;&gt;&gt; int('1.2')
### Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: '1.2'
</code></pre>

<p>If the string contains something that would be a valid int or float if we typed it into the interpreter, then we‚Äôre able to typecast it. But as soon as the type doesn‚Äôt match, or we try to convert something that‚Äôs not a number to a float or int, then we‚Äôll run into issues.</p>

<h3 id="converting-to-a-boolean">Converting to a Boolean</h3>

<p>One of the more important, and subtle type, conversions that we use in programming is casting to a boolean. We can cast anything to a boolean in Python by using the bool function.</p>

<pre><code class="language-cmd">&gt;&gt;&gt; bool(1)
True
&gt;&gt;&gt; bool(2.4)
True
&gt;&gt;&gt; bool('Tada')
True
&gt;&gt;&gt; bool('Tada'.lower)
True
&gt;&gt;&gt; bool(0)
False
&gt;&gt;&gt; bool(0.0)
False
&gt;&gt;&gt; bool("")
False
</code></pre>

<p>There are a select few items that convert into False. These are detailed in the Python truth value testing documentation, but can be summed up as False, None, any 0 value, and any empty sequence (an empty string for instance).</p>

<h3 id="boolean-operators-with-non-boolean-objects">Boolean Operators with Non-Boolean Objects</h3>

<p>Now that we know that every object has a boolean representation, we‚Äôre ready to revisit the boolean operators of and, or, and not. These operators will operate on any objects by using their boolean representations automatically.</p>

<p>These operations get a little more complicated as we use non-boolean operands:</p>

<pre><code class="language-cmd">&gt;&gt;&gt; 1 and 0
0
&gt;&gt;&gt; 'This' and 'That'
'That'
&gt;&gt;&gt; 'This' and 0 and 'That'
0
&gt;&gt;&gt; 0.0 and 1
0.0
</code></pre>

<p>Remember that and requires both operands to be true in order to return true, and this means that it will automatically return the first falsy value that it finds or the rightmost operand if they‚Äôre both true.</p>

<p>The or operator works in the opposite way. It will return the first object that would evaluate to true, or the rightmost falsy value.</p>

<pre><code class="language-cmd">&gt;&gt;&gt; 1 or 0
1
&gt;&gt;&gt; 0 or 1
1
&gt;&gt;&gt; 0 or ""
""
&gt;&gt;&gt; 0 or 1 or 'This'
1
</code></pre>

<p>Lastly, the not operator will simply return the opposite boolean value for whatever we pass to it:</p>

<pre><code class="language-cmd">&gt;&gt;&gt; not ""
True
&gt;&gt;&gt; not 1
False
</code></pre>

<h3 id="the-input-function">The <code class="language-plaintext highlighter-rouge">input</code> Function</h3>

<p>With an understanding of the basic types in Python, we‚Äôre finally ready to start writing some programs. In this lesson, we‚Äôll take a look at the input function that allows us to write command-line scripts that take in user input.</p>

<h3 id="documentation-for-this-video-1">Documentation For This Video</h3>

<p><a href="https://docs.python.org/3/library/functions.html#input">The input function</a></p>

<h3 id="prompting-for-user-input">Prompting for User Input</h3>

<p>Computer programs aren‚Äôt that interesting until they can be more dynamic. Over the next few short lessons, we‚Äôll be learning about how we can receive input from a user who‚Äôs running our program from the command-line, and then how we can manage to present information back to the screen.</p>

<p>Before we dig into the input function, let‚Äôs talk a little bit about functions in general. Functions allow us to package up bits of code to be able to run them more than once. Additionally, functions specify expected inputs and can also return information. If we take a look at a function from mathematics, we can see the same thing:</p>

<pre><code class="language-cmd">f(x) = x + 2
</code></pre>

<p>In this case, the name of the function is f, the input is x, and the code that will be executed is x + 2. We can provide a variety of values for x and get a different return value. So f(1) would return 3. In Python, we can reference functions by name, allowing us to pass them around like variables. But a function won‚Äôt be executed unless we ‚Äúcall it‚Äù by using parenthesis. We can see this in the REPL by typing in input without any parenthesis:</p>

<pre><code class="language-cmd">&gt;&gt;&gt; input
&lt;built-in function input&gt;
</code></pre>

<p>The input function is the easiest way that we can make our programs request user interaction. This function is simple in that it only takes one optional argument to be the prompt that we present the user. Whatever the user types will be returned by the input function as a string, and that means we can store it in a variable. Let‚Äôs try this out in the REPL now:</p>

<pre><code class="language-cmd">&gt;&gt;&gt; favorite = input("Favorite Color: ")
Favorite Color:
</code></pre>

<p>Now we‚Äôre left in a new prompt and we can type our answer. When we hit Enter/Return it will submit all of what we wrote and store it in the variable favorite. Note that the prompt argument is optional, so we can simply run input() without an argument and it will leave us at an empty prompt waiting once again for us to hit Enter/Return before then returning that value.</p>

<h3 id="prompting-for-multiple-values">Prompting for Multiple Values</h3>

<p>Now that we know how the input function works, let‚Äôs create our first real script. In this script, we‚Äôre going to ask the user to answer a series of questions, and store those answers in variables. In the next lesson, we‚Äôll then use these values.</p>

<p>Let‚Äôs call our script bio.py, and in this script, we‚Äôll ask for the following:</p>

<ul>
  <li>The user‚Äôs name</li>
  <li>The user‚Äôs favorite color</li>
  <li>The user‚Äôs age</li>
</ul>

<p>Create and open bio.py in your text editor and call input three different times, once for each piece of information that we want:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/code/bio.py
</code></pre></div></div>

<pre><code class="language-cmd">name = input("What is your name? ")
color = input("What is your favorite color? ")
age = input("How old are you today? ")
</code></pre>

<p>Both name and color make sense to be strings, but age should be a number. Let‚Äôs cast the value returned from the age prompt to be an int before assigning it to the variable. We can do this by placing the parenthesis for the int function around the entire input function call:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/code/bio.py
</code></pre></div></div>

<pre><code class="language-cmd">name = input("What is your name? ")
color = input("What is your favorite color? ")
age = int(input("How old are you today? "))
</code></pre>

<p>Now that we‚Äôve written our script, let‚Äôs run it:</p>

<pre><code class="language-cmd">$ python3.7 bio.py
What is your name? Kevin Bacon
What is your favorite color? Orange
How old are you today? 61
$
</code></pre>

<p>We didn‚Äôt do anything with the values that were returned, but since we were returned to our shell without an error we know that everything executed properly. If we were to give an invalid answer for the age question (something that wasn‚Äôt an int) Python will raise an error. We need to keep that in mind.</p>

:ET