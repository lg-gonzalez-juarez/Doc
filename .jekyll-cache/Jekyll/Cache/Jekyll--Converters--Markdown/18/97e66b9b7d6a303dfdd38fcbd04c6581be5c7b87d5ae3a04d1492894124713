I"<h1 id="introduction">Introduction</h1>

<p>In this lab, we work with image data using scikit-image. We will go through the process of reading in an existing image and make modifications to it programmatically.</p>

<h1 id="solution">Solution</h1>

<p>To get started, we need to log in to the VS Code server using the browser. To do so, use the provided public IP and the 9090 port. For example: <PUBLIC_IP>:9090</PUBLIC_IP></p>

<h1 id="install-scikit-image">Install scikit-image</h1>

<p>Before we can edit images we’ll need to install scikit-image:</p>

<ol>
  <li>Check the python version and make sure it is above 3.8:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> python -V
</code></pre></div>    </div>
  </li>
  <li>Install scikit_image:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> python -m pip install scikit-image
</code></pre></div>    </div>
  </li>
</ol>

<h1 id="load-the-highrisejpg-image-into-memory">Load the highrise.jpg Image into Memory</h1>

<p>Now that we have <code class="language-plaintext highlighter-rouge">scikit-image</code> installed, we’re ready to start using it in our <code class="language-plaintext highlighter-rouge">image_editing.py</code> script. To test the image changes that we’d like to automate, we’re going to work with a local image called highrise.jpg. This can be found at <code class="language-plaintext highlighter-rouge">/home/cloud_user/highrise.jpg</code>:</p>

<ol>
  <li>
    <p>Using the Open File or Folder command provided by the VS Code server, open our <code class="language-plaintext highlighter-rouge">image_editing.py</code> file.</p>
  </li>
  <li>
    <p>Under the # 1) <code class="language-plaintext highlighter-rouge">Load highrise.jpg</code> into memory section, enter the following code:</p>
  </li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> from skimage import io

 highrise = io.imread("/home/cloud_user/highrise.jpg")
</code></pre></div></div>

<ol>
  <li>
    <p>Select the Run Cell selection above the first section.</p>
  </li>
  <li>
    <p>After the first section runs, click on Run Cell for the section we just updated.</p>
  </li>
</ol>

<h1 id="create-a-black-and-white-version-of-highrisejpg">Create a Black and White Version of highrise.jpg</h1>

<p>The first modification we’d like to automate is the conversion of an image from being a colored/RGB image to being a black and white or grayscale image. This is a common task, and we can leverage code from within the skimage.colors module to do nearly all of the work.</p>

<p>Under the # 2) Create a black and white version of highrise.jpg section, enter the following:</p>

<p>from skimage.color import rgb2gray</p>

<p>grayscale = rgb2gray(highrise)</p>

<p>fig, ax = plt.subplots(1, 2, figsize=(6, 4))
 ax[0].imshow(highrise, cmap=plt.cm.gray)
 ax[0].axis(“off”)
 ax[1].imshow(grayscale, cmap=plt.cm.gray)
 ax[1].axis(“off”)</p>

<p>fig.tight_layout()
 plt.show()
Select Run Cell for this section, and we will see a comparison of our old color image and our new black and white one.</p>

<p>Create a Copy of highrise.jpg with a Circular Mask
Adding a mask to our image is a much more complicated task that requires us to index and slice the array that is backing our image’s data:</p>

<p>Under the # 3) Create a version of highrise.job with a circular mask, enter the following:</p>

<p>import numpy as np</p>

<p>masked = highrise.copy()</p>

<p>nrows, ncols, nsize = masked.shape
 row, col = np.ogrid[:nrows, :ncols]
 cnt_row, cnt_col = nrows / 2, ncols / 2
 outer_disk_mask = (row - cnt_row) ** 2 + (col - cnt_col) ** 2 &gt; (nrows / 2) ** 2
 print(outer_disk_mask)
 masked[outer_disk_mask] = 0
Click on Run Cell to check the mask. It will show True for all fields when it is correct.</p>

<p>Remove the print (outer_disk_mask) section, as we no longer need it.</p>

<p>Enter the following under what we have already created:</p>

<p>fig2, ax2 = plt.subplots(1, 2, figsize=(6, 4))
 ax2[0].imshow(highrise, cmap=plt.cm.gray)
 ax2[0].axis(“off”)
 ax2[1].imshow(masked, cmap=plt.cm.gray)
 ax2[1].axis(“off”)</p>

<p>fig2.tight_layout()
 plt.show()
Click on Run Cell and note that the image now has blacked out corners.</p>

:ET