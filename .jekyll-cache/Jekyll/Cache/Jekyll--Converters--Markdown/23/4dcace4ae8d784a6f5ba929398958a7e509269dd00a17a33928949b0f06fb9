I"”<h2 id="261-numpy-and-scikit-image">26.1. NumPy and Scikit-Image</h2>

<p>scikit-image is an open-source package for image processing. It has a wide range of algorithms that allow you to process your images. Documentation can be found <a href="https://scikit-image.org/docs/stable/">here</a>.</p>

<p>In this lesson, we are going to take a look at how to load an image into scikit-image and examine the NumPy array that results.</p>

<h3 id="installation">Installation</h3>

<p>To install scikit-image:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python -m pip install scikit-image
</code></pre></div></div>

<h3 id="loading-an-image">Loading an Image</h3>

<p>First, we need to get the photo we are planning to use. In this case, the photo is one I took of some flowers.</p>

<pre><code class="language-/home/cloud_user/notebooks```">
```curl -O https://raw.githubusercontent.com/linuxacademy/content-using-pythons-maths-science-and-engineering-libraries/master/flowers.jpg/home/cloud_user/notebooks/lesson1.py```
</code></pre>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># %%
import numpy as np
from skimage import io

img = io.imread('flowers.jpg')
io.imshow(img)
type(img)
img.shape
</code></pre></div></div>

<p>We should make a backup of the picture before proceeding. The file extension (.jpg, .tiff) tells Jupyter the format in which it will be saved.</p>

<p>Letâ€™s make a backup of the picture:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>io.imsave("img_bup.jpg", img)
io.imsave("img_bup.tiff", img)
</code></pre></div></div>

<h2 id="262-image-data-types">26.2. Image Data Types</h2>

<p>This lesson continues from our previous lesson on NumPy and Scikit-Image, and weâ€™ll review how data is stored and data types.</p>

<p>In case you have shut your server down, please reload the image file as we did in the previous lesson.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># %%
import numpy as np
from skimage import io

img = io.imread('flowers.jpg')
io.imshow(img)
img.shape
img[0][0]
</code></pre></div></div>

<p>The image data is composed of arrays of 3 representing the RGB values.</p>

<p>Notice this data type (<code class="language-plaintext highlighter-rouge">dtype</code>) is <code class="language-plaintext highlighter-rouge">uint8</code>. The <code class="language-plaintext highlighter-rouge">u</code> means unsigned, the <code class="language-plaintext highlighter-rouge">int</code> means integer, and the <code class="language-plaintext highlighter-rouge">8</code> means 8-bit. In other words, the data is a number between 0 and 255. These are the values used to represent colors in the RGB (Red, Green, Blue) color model.</p>

<h2 id="263-transforming-images">26.3. Transforming Images</h2>

<p>This lesson continues from the previous lesson and reviews how we can work with the image and colorspaces.</p>

<p>In case you have shutdown your server, re-load the image:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># %%
import numpy as np
from skimage import io

img = io.imread('flowers.jpg')
io.imshow(img)
</code></pre></div></div>

<p>As you can see, the image is shown with axes values. These correspond to <code class="language-plaintext highlighter-rouge">img[i][j]</code>, where <code class="language-plaintext highlighter-rouge">i</code> represents the vertical axis, and <code class="language-plaintext highlighter-rouge">j</code> represents the horizontal axis.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>img[250][1500]
</code></pre></div></div>

<p>As such, we can change the color of any pixel just by accessing it and changing the three-number array. Letâ€™s create a banner along with the top showing blue, green, and white. We can split these by x values:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for i in range(500):
    for j in range(1000):
        img[i][j][0] = 51
        img[i][j][1] = 0
        img[i][j][2] = 255
    for k in range(1000, 2000):
        img[i][k][0] = 204
        img[i][k][1] = 255
        img[i][k][2] = 51
    for l in range(2000, 3000):
        img[i][l][0] = 255
        img[i][l][1] = 255
        img[i][l][2] = 255

io.imshow(img)
img = io.imread('flowers.jpg')
io.imshow(img)
</code></pre></div></div>

<p>Even though this picture is a rectangle, we can put a circular mask around it using the <a href="https://en.wikipedia.org/wiki/Pythagorean_theorem">Pythagorean theorem</a>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nrows, ncols, nsize = img.shape
row, col = np.ogrid[:nrows, :ncols]
cnt_row, cnt_col = nrows / 2, ncols / 2
outer_disk_mask = ((row - cnt_row)**2 + (col - cnt_col)**2 &gt; (nrows / 2)**2)
img[outer_disk_mask] = 0

io.imshow(img)
</code></pre></div></div>

<p>Letâ€™s examine <a href="https://scikit-image.org/docs/stable/api/skimage.color.html">colorspaces</a>. We will be making use of the <code class="language-plaintext highlighter-rouge">convert_colorpace</code> method. If you review the documentation on this method, you will find a list of colorspaces that can be used.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from skimage import color

img = io.imread('flowers.jpg')
io.imshow(img)
hsv = color.convert_colorspace(img, 'RGB','HSV')
hsv.shape
hsv[0][0]
io.imshow(hsv)
</code></pre></div></div>

<p>[]:</p>

:ET