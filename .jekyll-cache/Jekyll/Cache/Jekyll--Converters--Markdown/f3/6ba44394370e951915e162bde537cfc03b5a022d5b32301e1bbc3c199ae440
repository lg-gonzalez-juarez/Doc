I"Ö<h1 id="introduction">Introduction</h1>

<p>Files are used for many things in programming, including storing and reading data as well as writing to the screen. In this hands-on lab, we‚Äôll add a way to read and store information about custom classes, using a file as a flat database for our employee information. To feel comfortable completing this lab, you‚Äôll want to know how to read and write to files (watch the ‚ÄúInteracting with Files‚Äù video from the Certified Associate in Python Programming Certification course), use class methods (watch the ‚ÄúCustom Constructors, Class Methods, and Decorators‚Äù video from the Certified Associate in Python Programming Certification course), and create and use class instances (watch the ‚ÄúCreating and Using Python Classes‚Äù video from the Certified Associate in Python Programming Certification course).</p>

<h1 id="solution">Solution</h1>

<p>To work through the lab, you can either log in via a terminal on your local machine and use a text editor in the terminal, or you can use VS Code in the browser. This lab guide will go through the steps using VS Code in the browser.</p>

<p>In order to use VS Code in the browser, navigate to the public IP address of the workstation server (provided on the lab page) on port 8080 (e.g., http://<PUBLIC_IP>:8080).</PUBLIC_IP></p>

<h1 id="add-identifier-attribute-to-employee-instances-and-init-method">Add identifier Attribute to Employee Instances and <strong>init</strong> Method</h1>

<ol>
  <li>
    <p>In the menu at the top, click <strong>File</strong> &gt; <strong>Open</strong>.</p>
  </li>
  <li>
    <p>Select <strong>employee.py</strong>.</p>
  </li>
  <li>
    <p>In the <code class="language-plaintext highlighter-rouge">__init__ function</code>, within the parentheses, add a comma after <code class="language-plaintext highlighter-rouge">phone_number=None</code>  and add:</p>
  </li>
</ol>

<p>identifier=None
Under self.phone_number = phone_number, add the following:</p>

<p>self.identifier = identifier
Add Employee.get_all Class Method to Return a List of Employee Objects
Edit the beginning of the employee.py file to match the following:</p>

<p>class Employee:
    default_db_file = ‚Äúemployee_file.txt‚Äù</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@classmethod
def get_all(cls, file_name=None):
    results = []

    if not file_name:
        file_name = cls.default_db_file

    with open(file_name, "r") as f:
        lines = [
            line.strip("\n").split(",") + [index + 1]
            for index, line in enumerate(f.readlines())
        ]

    for line in lines:
        results.append(cls(*line))

    return results

# remainder of class was unchanged and omitted In the menu at the top, click Terminal &gt; New Terminal.
</code></pre></div></div>

<p>Run test_employee.py:</p>

<p>python3.7 test_employee.py
We‚Äôll get an error that we‚Äôre missing the get_at_line attribute.</p>

<p>Add Employee.get_at_line Class Method to Return a Single Employee
Add the following beneath the get_all class method:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@classmethod
def get_at_line(cls, line_number, file_name=None):
    if not file_name:
        file_name = cls.default_db_file

    with open(file_name, 'r') as f:
        line = f.readlines()[line_number - 1]
        attrs = line.strip("\n").split(',') + [line_number]
        return cls(*attrs)

# remainder of class was unchanged and omitted Run test_employee.py:
</code></pre></div></div>

<p>python3.7 test_employee.py
We‚Äôll get an error that we‚Äôre missing the save attribute.</p>

<p>Add save Instance Method to Employee Class to Write New Instances to the File
Add the following to the bottom of the file (beneath the def email_signature block):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def save(self, file_name=None):
    if not file_name:
        file_name = self.default_db_file

    with open(file_name, "r+") as f:
        lines = f.readlines()
        if self.identifier:
            lines[self.identifier - 1] = self._database_line()
        else:
            lines.append(self._database_line())
        f.seek(0)
        f.writelines(lines)

def _database_line(self):
    return (
        ",".join(
            [self.name, self.email_address, self.title, self.phone_number or ""]
        )
        + "\n"
    ) For clarity's sake, this is what the employee.py file should look like at this point:
</code></pre></div></div>

<p>class Employee:
    default_db_file = ‚Äúemployee_file.txt‚Äù</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@classmethod
def get_all(cls, file_name=None):
    results = []

    if not file_name:
        file_name = cls.default_db_file

    with open(file_name, "r") as f:
        lines = [
            line.strip("\n").split(",") + [index + 1]
            for index, line in enumerate(f.readlines())
        ]

    for line in lines:
        results.append(cls(*line))

    return results

@classmethod
def get_at_line(cls, line_number, file_name=None):
    if not file_name:
        file_name = cls.default_db_file

    with open(file_name, "r") as f:
        line = [
            line.strip("\n").split(",") + [index + 1]
            for index, line in enumerate(f.readlines())
        ][line_number - 1]
        return cls(*line)

def __init__(self, name, email_address, title, phone_number=None, identifier=None):
    self.name = name
    self.email_address = email_address
    self.title = title
    self.phone_number = phone_number
    self.identifier = identifier

def email_signature(self, include_phone=False):
    signature = f"{self.name} - {self.title}\n{self.email_address}"
    if include_phone and self.phone_number:
        signature += f" ({self.phone_number})"
    return signature

def save(self, file_name=None):
    if not file_name:
        file_name = self.default_db_file

    with open(file_name, "r+") as f:
        lines = f.readlines()
        if self.identifier:
            lines[self.identifier - 1] = self._database_line()
        else:
            lines.append(self._database_line())
        f.seek(0)
        f.writelines(lines)

def _database_line(self):
    return (
        ",".join(
            [self.name, self.email_address, self.title, self.phone_number or ""]
        )
        + "\n"
    ) Test the implementation by running test_employee.py.
</code></pre></div></div>

<p>python3.7 test_employee.py
If the implementation is correct, we won‚Äôt see any errors. If things aren‚Äôt working correctly, we will see error messages that can hopefully help us.</p>

:ET